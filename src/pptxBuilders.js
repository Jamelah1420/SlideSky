import PptxGenJS from "pptxgenjs";

/* ===== THEME ===== */
export const PPTX_THEME = {
Â  BG_LIGHT: "#FFFFFF",
Â  TXT_DARK: "#2C2C2C",
Â  TXT_MUTED: "#6A6A6A",
Â  ACCENT: "#0078D4",
Â  BG_DARK: "#0D1117",
Â  TXT_ON_DARK: "#EFEFEF",
Â  TXT_MUTED_ON_DARK: "#9AA1A9",
Â  DISPLAY_FONT: "Inter",
Â  TEXT_FONT: "Inter Light",
Â  TEXT_FONT_BOLD: "Inter SemiBold",
Â  TITLE_SIZE: 36,
Â  SUBTITLE_SIZE: 26,
Â  BODY_SIZE: 20,
Â  TITLE_HERO: 60,
Â  BULLET_LINE: 200,
};

const LAYOUT = {
Â  page: { w: 10, h: 5.625 },
Â  band: { y: 0, h: 0.65 },
Â  dividerY: 0.65,
Â  accentRule: { x: 0.6, y: 1.1, w: 0.06, h: 4.9 },
Â  bullets: { x: 0.95, y: 1.5, w: 8.5, h: 4.8 },
Â  bulletsAnalytical: { x: 0.95, y: 2.2, w: 5.2, h: 3.9 },
Â  takeawayCard: { x: 6.4, y: 1.25, w: 3.2, h: 2.1 },
};

/* ===== TEXT NORMALIZATION (fixes [object Object]) ===== */
// Returns a plain string from any input (string | number | object | array)
const toPlainString = (val) => {
Â  if (val == null) return "";
Â  if (typeof val === "string" || typeof val === "number" || typeof val === "boolean")
Â  Â  return String(val);

Â  // Rich text object? { text: string | arrayOfRuns }
Â  if (typeof val === "object" && "text" in val) {
Â  Â  const t = val.text;
Â  Â  if (Array.isArray(t)) {
Â  Â  Â  // array of runs like [{text:'A'}, {text:'B'}]
Â  Â  Â  return t.map((r) => toPlainString(r?.text ?? r)).join("");
Â  Â  }
Â  Â  return toPlainString(t);
Â  }

Â  // Array (maybe runs/objects/strings)
Â  if (Array.isArray(val)) return val.map((v) => toPlainString(v)).join("");

Â  // Fallback
Â  try {
Â  Â  return JSON.stringify(val);
Â  } catch {
Â  Â  return String(val);
Â  }
};

/* ===== MARKDOWN â†’ RUNS ===== */
export const parseMarkdownBolding = (raw, onDark = false) => {
Â  const t = PPTX_THEME;
Â  const boldColor = (onDark ? t.TXT_ON_DARK : t.TXT_DARK).replace("#", "");
Â  const normalColor = (onDark ? t.TXT_MUTED_ON_DARK : t.TXT_MUTED).replace("#", "");
Â  const text = toPlainString(raw);

Â  const parts = text.split(/(\*\*.*?\*\*)/g).filter(Boolean);
Â  return parts.map((part) => {
Â  Â  const isBold = part.startsWith("**") && part.endsWith("**");
Â  Â  const content = isBold ? part.slice(2, -2) : part;
Â  Â  return {
Â  Â  Â  text: content,
Â  Â  Â  options: {
Â  Â  Â  Â  bold: isBold,
Â  Â  Â  Â  color: isBold ? boldColor : normalColor,
Â  Â  Â  Â  fontFace: isBold ? t.TEXT_FONT_BOLD : t.TEXT_FONT,
Â  Â  Â  },
Â  Â  };
Â  });
};

// Build bullet paragraph objects (safe)
const bulletParas = (items, { onDark = false, size = PPTX_THEME.BODY_SIZE } = {}) =>
Â  (items || [])
Â  Â  .map((s) => toPlainString(s))
Â  Â  .filter((s) => s.trim().length > 0)
Â  Â  .map((s) => ({
Â  Â  Â  text: parseMarkdownBolding(s, onDark),
Â  Â  Â  options: {
Â  Â  Â  Â  bullet: { code: "2022" }, // â€¢
Â  Â  Â  Â  indentLevel: 0,
Â  Â  Â  Â  fontSize: size,
Â  Â  Â  Â  lineSpacing: PPTX_THEME.BULLET_LINE,
Â  Â  Â  },
Â  Â  }));

/* ===== MASTER & TITLE ===== */
export const defineMasterSlide = (pptx) => {
Â  const t = PPTX_THEME;
Â  pptx.defineSlideMaster({
Â  Â  title: "MASTER",
Â  Â  background: { fill: t.BG_LIGHT.replace("#", "") },
Â  Â  objects: [
Â  Â  Â  { rect: { x: 0, y: LAYOUT.band.y, w: LAYOUT.page.w, h: LAYOUT.band.h, fill: t.BG_LIGHT.replace("#", "") } },
Â  Â  Â  { rect: { x: 0, y: LAYOUT.dividerY, w: LAYOUT.page.w, h: 0.02, fill: t.ACCENT.replace("#", "") } },
Â  Â  Â  { rect: { ...LAYOUT.accentRule, fill: t.ACCENT.replace("#", "") } },
Â  Â  Â  {
Â  Â  Â  Â  text: {
Â  Â  Â  Â  Â  text: `Auto-generated insights â€¢ ${new Date().toLocaleString()}`,
Â  Â  Â  Â  Â  options: {
Â  Â  Â  Â  Â  Â  x: 0.4, y: 5.35, w: 9.2, h: 0.3,
Â  Â  Â  Â  Â  Â  fontSize: 9, color: t.TXT_MUTED.replace("#", ""), align: "right", fontFace: t.TEXT_FONT,
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  },
Â  Â  Â  },
Â  Â  ],
Â  });
};

export const createTitleSlide = (pptx, presentation) => {
Â  const t = PPTX_THEME;
Â  const slide = pptx.addSlide({ masterName: "MASTER" });
Â  slide.background = { fill: t.BG_DARK.replace("#", "") };

Â  slide.addText("Executive HR Data Summary", {
Â  Â  x: 0.5, y: 1.5, w: 9.0, h: 0.5,
Â  Â  fontSize: t.SUBTITLE_SIZE, bold: true, color: t.TXT_ON_DARK.replace("#", ""), align: "center",
Â  Â  fontFace: t.DISPLAY_FONT,
Â  });

Â  slide.addText(toPlainString(presentation?.title || "Presentation Title"), {
Â  Â  x: 0.5, y: 2.5, w: 9.0, h: 1.5,
Â  Â  fontSize: t.TITLE_HERO, bold: true, color: t.TXT_ON_DARK.replace("#", ""), align: "center",
Â  Â  fontFace: t.DISPLAY_FONT, lineSpacing: 100,
Â  });

Â  if (presentation?.subtitle) {
Â  Â  slide.addText(toPlainString(presentation.subtitle), {
Â  Â  Â  x: 0.5, y: 4.2, w: 9.0, h: 0.5,
Â  Â  Â  fontSize: t.SUBTITLE_SIZE, color: t.TXT_MUTED_ON_DARK.replace("#", ""), align: "center",
Â  Â  Â  fontFace: t.TEXT_FONT,
Â  Â  });
Â  }

Â  const email = presentation?.contact?.email;
Â  const name = presentation?.contact?.name;
Â  if (email || name) {
Â  Â  slide.addText(
Â  Â  Â  [
Â  Â  Â  Â  ...(email ? [{ text: `\u2709 ${toPlainString(email)}`, options: { color: t.TXT_MUTED_ON_DARK.replace("#", ""), fontSize: 14, fontFace: t.TEXT_FONT } }] : []),
Â  Â  Â  Â  ...(email && name ? [{ text: " Â â€¢ Â ", options: { color: t.TXT_MUTED_ON_DARK.replace("#", ""), fontSize: 14, fontFace: t.TEXT_FONT } }] : []),
Â  Â  Â  Â  ...(name ? [{ text: toPlainString(name), options: { color: t.TXT_MUTED_ON_DARK.replace("#", ""), fontSize: 14, fontFace: t.TEXT_FONT } }] : []),
Â  Â  Â  ],
Â  Â  Â  { x: 0.5, y: 5.1, w: 9.0, h: 0.6, align: "center" }
Â  Â  );
Â  }
};

/* ===== CONTENT SLIDES ===== */
export const createContentSlide = (pptx, section, idx) => {
Â  const t = PPTX_THEME;
Â  const slide = pptx.addSlide({ masterName: "MASTER" });

Â  const titleText = toPlainString(section?.sectionTitle || `Slide ${idx + 2}`);
Â  const pts = Array.isArray(section?.points) ? section.points : [];
Â  const isAnalytical = idx >= 2;

Â  // Title in the top band
Â  slide.addText(titleText, {
Â  Â  x: 0.6, y: 0.15, w: 8.8, h: 0.5,
Â  Â  fontSize: 20, bold: true, color: t.TXT_DARK.replace("#", ""), fontFace: t.DISPLAY_FONT,
Â  });

Â  if (!pts.length) return;

Â  if (!isAnalytical) {
Â  Â  slide.addText(
Â  Â  Â  bulletParas(pts, { onDark: false, size: t.BODY_SIZE }),
Â  Â  Â  { x: LAYOUT.bullets.x, y: LAYOUT.bullets.y, w: LAYOUT.bullets.w, h: LAYOUT.bullets.h, fontFace: t.TEXT_FONT }
Â  Â  );
Â  Â  return;
Â  }

Â  // Analytical: first is subheading, last is takeaway
Â  const subheading = toPlainString(pts[0] || "");
Â  const bodyBullets = pts.slice(1, Math.max(pts.length - 1, 1));
Â  const takeaway = toPlainString(pts[pts.length - 1] || "");

Â  slide.addText(parseMarkdownBolding(subheading, false), {
Â  Â  x: 0.95, y: 1.2, w: 5.2, h: 0.7,
Â  Â  fontSize: t.SUBTITLE_SIZE, bold: true, color: t.TXT_DARK.replace("#", ""), fontFace: t.DISPLAY_FONT,
Â  });

Â  slide.addText(
Â  Â  bulletParas(bodyBullets, { onDark: false, size: 19 }),
Â  Â  { x: LAYOUT.bulletsAnalytical.x, y: LAYOUT.bulletsAnalytical.y, w: LAYOUT.bulletsAnalytical.w, h: LAYOUT.bulletsAnalytical.h, fontFace: t.TEXT_FONT }
Â  );

Â  slide.addShape(pptx.ShapeType.roundRect, {
Â  Â  x: LAYOUT.takeawayCard.x, y: LAYOUT.takeawayCard.y, w: LAYOUT.takeawayCard.w, h: LAYOUT.takeawayCard.h,
Â  Â  fill: t.BG_LIGHT.replace("#", ""), line: { color: t.ACCENT.replace("#", ""), width: 1.2 }, rectRadius: 0.15,
Â  });
Â  slide.addText("Key takeaway", {
Â  Â  x: LAYOUT.takeawayCard.x + 0.15, y: LAYOUT.takeawayCard.y + 0.12, w: LAYOUT.takeawayCard.w - 0.3, h: 0.3,
Â  Â  fontSize: 12, bold: true, color: t.ACCENT.replace("#", ""), fontFace: t.DISPLAY_FONT,
Â  });
Â  
Â  // ðŸ›‘ FIX APPLIED HERE: Correctly pass the array of rich text objects (runs)
Â  // as the 'text' property within the main object.
Â  slide.addText(
Â  Â  [
Â  Â  Â  {
Â  Â  Â  Â  text: parseMarkdownBolding(takeaway, false), 
Â  Â  Â  Â  options: {
Â  Â  Â  Â  Â  fontSize: 14, 
Â  Â  Â  Â  Â  color: t.TXT_DARK.replace("#", ""), 
Â  Â  Â  Â  Â  fontFace: t.TEXT_FONT, 
Â  Â  Â  Â  Â  wrap: true,
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  ],
Â  Â  { 
Â  Â  Â  x: LAYOUT.takeawayCard.x + 0.18, 
Â  Â  Â  y: LAYOUT.takeawayCard.y + 0.45, 
Â  Â  Â  w: LAYOUT.takeawayCard.w - 0.36, 
Â  Â  Â  h: LAYOUT.takeawayCard.h - 0.6,
Â  Â  }
Â  );
};

export const createSectionSlides = (pptx, sections = []) => {
Â  sections.forEach((s, i) => createContentSlide(pptx, s, i));
};

/* ===== BUILD & DOWNLOAD ===== */
export const buildAndDownloadPresentation = async (presentation, sections, filename = "Presentation.pptx") => {
Â  const pptx = new PptxGenJS();
Â  pptx.layout = "LAYOUT_16x9";
Â  defineMasterSlide(pptx);
Â  createTitleSlide(pptx, presentation);
Â  createSectionSlides(pptx, sections);
Â  await pptx.writeFile({ fileName: filename });
};